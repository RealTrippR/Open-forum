<!DOCTYPE html>
<html lang="en">
<head> 
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title> OpenForum </title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>
<div id="navbar"> </div>
<div id="channelBar"> </div>
<div id="channelThreadsHolder" class="channelThreadsHolder"> </div> <!-- thread header buttons are stored here -->
<div id="threadMessagesHolder" class="threadMessagesHolder" style="display: none;"> </div> <!-- holds the messages for the current thread-->
<div id="channelInfoBarHolder" class="channelInfoBarHolder" style="display: none;"> </div>
<div id="channelNameHeader" class="channelNameHeader"> </div>
<div id="copyright-div"> </div>
<!-- init socket.io -->
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
</script>
<!-- load webpage content -->
<script src="/loadNavbar.js"> </script>
<script src="/loadThread.js"> </script>
<script src="/loadChannelBar.js"> </script>
<script src="/loadChannel.js" ></script>
<script src="/loadCopyright.js"></script>

<script>

    function loadPage() {
        
        window.user = <%- user %>
        window.loggedIn = <%- loggedIn %>

        let _loadChannel = undefined;
        <% if (locals.loadChannel) { %>
            _loadChannel = <%- loadChannel %> - 1;
        <% } %>
        let _loadThread = undefined;
        <% if (locals.loadThread) { %>
            _loadThread = <%- loadThread %>;
        <% } %>
        
        loadNavbar();
        // it's weird, but it works - don't touch it!
        let _channels = <%- JSON.stringify(channels) %>
        window.channels = JSON.parse(_channels);
        console.log('auth:', window.loggedIn);
        //window.channels = getTest;  // Converts to a valid JS object
        //window.channels = JSON.parse('[{"id":1,"name":"Test Channel","topicListID":0}]' );
        loadChannelBar();
        createStagingThreadAndThreadInfoHolder()
        initMessageHolder();


        if (_loadChannel != undefined) {
            let loadHTML = true;
            if (_loadThread) {
                loadHTML = false;
            }
            (async () => {

                await setCurrentChannel(window.channels[_loadChannel], loadHTML);

                if (_loadThread != undefined) {
                    setCurrentThread(_loadThread);
                }
            })();

        } else if (_loadThread == undefined) {
            setCurrentChannel(window.channels[0]);
        }
    }
    // 
    window.onload = function() {
        loadPage();
        loadCopyright(true);
    };

    window.addEventListener('popstate', (event) => {
    const state = event.state;
    if (state && state.channelId) {
        state.channelId = state.channelId - 1;
        if (state.threadId) {
            setCurrentChannel(window.channels[state.channelId], false);
            setCurrentThread(state.threadId);
        } else {
            setCurrentChannel(window.channels[state.channelId]);
        }
    } else {
        // fallback if no state is present
        setCurrentChannel(window.channels[0]);
    }

});
</script>
</body>
